"jobs":
  check:
    "uses": "grafana/loki-release/.github/workflows/check.yml@main"
    "with":
      "build_image": "grafana/loki-build-image:0.34.1"
      "golang_ci_lint_version": "v1.60.3"
      "release_lib_ref": "main"
      "skip_validation": false
      "use_github_app_token": true
  version:
    needs:
      - "check"
    outputs:
      pr_created: "${{ steps.version.outputs.pr_created }}"
      version: "${{ steps.version.outputs.version }}"
    runs-on: "ubuntu-latest"
    steps:
      - name: "pull release library code"
        uses: "actions/checkout@v4"
        with:
          path: "lib"
          ref: "${{ env.RELEASE_LIB_REF }}"
          repository: "grafana/loki-release"
      - name: "pull code to release"
        uses: "actions/checkout@v4"
        with:
          path: "release"
          repository: "${{ env.RELEASE_REPO }}"
      - name: "setup node"
        uses: "actions/setup-node@v4"
        with:
          node-version: 20
      - id: "extract_branch"
        name: "extract branch name"
        run: |
          echo "branch=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" >> $GITHUB_OUTPUT
        working-directory: "release"
      - id: "get_github_app_token"
        if: "${{ fromJSON(env.USE_GITHUB_APP_TOKEN) }}"
        name: "get github app token"
        uses: "actions/create-github-app-token@v1"
        with:
          app-id: "${{ secrets.APP_ID }}"
          owner: "${{ github.repository_owner }}"
          private-key: "${{ secrets.APP_PRIVATE_KEY }}"
      - id: "github_app_token"
        name: "set github token"
        run: |
          if [[ "${USE_GITHUB_APP_TOKEN}" == "true" ]]; then
            echo "token=${{ steps.get_github_app_token.outputs.token }}" >> $GITHUB_OUTPUT
          else
            echo "token=${{ secrets.GH_TOKEN }}" >> $GITHUB_OUTPUT
          fi
      - id: "version"
        name: "get release version"
        run: |
          npm install

          if [[ -z "${{ env.RELEASE_AS }}" ]]; then
            npm exec -- release-please release-pr \
              --consider-all-branches \
              --dry-run \
              --dry-run-output release.json \
              --group-pull-request-title-pattern "chore\${scope}: release\${component} \${version}" \
              --manifest-file .release-please-manifest.json \
              --pull-request-title-pattern "chore\${scope}: release\${component} \${version}" \
              --release-type simple \
              --repo-url "${{ env.RELEASE_REPO }}" \
              --separate-pull-requests false \
              --target-branch "${{ steps.extract_branch.outputs.branch }}" \
              --token "${{ steps.github_app_token.outputs.token }}" \
              --versioning-strategy "${{ env.VERSIONING_STRATEGY }}"
          else
            npm exec -- release-please release-pr \
              --consider-all-branches \
              --dry-run \
              --dry-run-output release.json \
              --group-pull-request-title-pattern "chore\${scope}: release\${component} \${version}" \
              --manifest-file .release-please-manifest.json \
              --pull-request-title-pattern "chore\${scope}: release\${component} \${version}" \
              --release-type simple \
              --repo-url "${{ env.RELEASE_REPO }}" \
              --separate-pull-requests false \
              --target-branch "${{ steps.extract_branch.outputs.branch }}" \
              --token "${{ steps.github_app_token.outputs.token }}" \
              --release-as "${{ env.RELEASE_AS }}"
          fi

          cat release.json

          if [[ `jq length release.json` -gt 1 ]]; then 
            echo 'release-please would create more than 1 PR, so cannot determine correct version'
            echo "pr_created=false" >> $GITHUB_OUTPUT
            exit 1
          fi

          if [[ `jq length release.json` -eq 0 ]]; then 
            echo "pr_created=false" >> $GITHUB_OUTPUT
          else
            version="$(npm run --silent get-version)"
            echo "Parsed version: ${version}"
            echo "version=${version}" >> $GITHUB_OUTPUT
            echo "pr_created=true" >> $GITHUB_OUTPUT
          fi
        working-directory: "lib"
  "fluent-bit":
    "env":
      "BUILD_TIMEOUT": 60
      "IMAGE_PREFIX": "grafana"
      "RELEASE_LIB_REF": "main"
      "RELEASE_REPO": "grafana/loki"
    "needs":
    - "check"
    "runs-on": "ubuntu-latest"
    "steps":
    - "name": "pull release library code"
      "uses": "actions/checkout@v4"
      "with":
        "path": "lib"
        "ref": "${{ env.RELEASE_LIB_REF }}"
        "repository": "grafana/loki-release"
    - "name": "pull code to release"
      "uses": "actions/checkout@v4"
      "with":
        "path": "release"
        "repository": "${{ env.RELEASE_REPO }}"
    - "name": "setup node"
      "uses": "actions/setup-node@v4"
      "with":
        "node-version": 20
    - "name": "Set up QEMU"
      "uses": "docker/setup-qemu-action@v3"
    - "name": "set up docker buildx"
      "uses": "docker/setup-buildx-action@v3"
    - "name": "Login to DockerHub (from vault)"
      "uses": "grafana/shared-workflows/actions/dockerhub-login@main"
    - "id": "weekly-version"
      "name": "Get weekly version"
      "run": |
        echo "version=$(./tools/image-tag)" >> $GITHUB_OUTPUT
      "working-directory": "release"
    - "name": "Build and push"
      "timeout-minutes": "${{ fromJSON(env.BUILD_TIMEOUT) }}"
      "uses": "docker/build-push-action@v6"
      "with":
        "build-args": "IMAGE_TAG=${{ steps.weekly-version.outputs.version }}"
        "context": "release"
        "file": "release/clients/cmd/fluent-bit/Dockerfile"
        "platforms": "linux/amd64"
        "push": true
        "tags": "${{ env.IMAGE_PREFIX }}/fluent-bit-plugin-loki:${{ steps.weekly-version.outputs.version }}"
  "fluentd":
    "env":
      "BUILD_TIMEOUT": 60
      "IMAGE_PREFIX": "grafana"
      "RELEASE_LIB_REF": "main"
      "RELEASE_REPO": "grafana/loki"
    "needs":
    - "check"
    "runs-on": "ubuntu-latest"
    "steps":
    - "name": "pull release library code"
      "uses": "actions/checkout@v4"
      "with":
        "path": "lib"
        "ref": "${{ env.RELEASE_LIB_REF }}"
        "repository": "grafana/loki-release"
    - "name": "pull code to release"
      "uses": "actions/checkout@v4"
      "with":
        "path": "release"
        "repository": "${{ env.RELEASE_REPO }}"
    - "name": "setup node"
      "uses": "actions/setup-node@v4"
      "with":
        "node-version": 20
    - "name": "Set up QEMU"
      "uses": "docker/setup-qemu-action@v3"
    - "name": "set up docker buildx"
      "uses": "docker/setup-buildx-action@v3"
    - "name": "Login to DockerHub (from vault)"
      "uses": "grafana/shared-workflows/actions/dockerhub-login@main"
    - "id": "weekly-version"
      "name": "Get weekly version"
      "run": |
        echo "version=$(./tools/image-tag)" >> $GITHUB_OUTPUT
      "working-directory": "release"
    - "name": "Build and push"
      "timeout-minutes": "${{ fromJSON(env.BUILD_TIMEOUT) }}"
      "uses": "docker/build-push-action@v6"
      "with":
        "build-args": "IMAGE_TAG=${{ steps.weekly-version.outputs.version }}"
        "context": "release"
        "file": "release/clients/cmd/fluentd/Dockerfile"
        "platforms": "linux/amd64"
        "push": true
        "tags": "${{ env.IMAGE_PREFIX }}/fluent-plugin-loki:${{ steps.weekly-version.outputs.version }}"
  "logcli":
    "env":
      "BUILD_TIMEOUT": 60
      "IMAGE_PREFIX": "grafana"
      "RELEASE_LIB_REF": "main"
      "RELEASE_REPO": "grafana/loki"
    "needs":
    - "check"
    "runs-on": "ubuntu-latest"
    "steps":
    - "name": "pull release library code"
      "uses": "actions/checkout@v4"
      "with":
        "path": "lib"
        "ref": "${{ env.RELEASE_LIB_REF }}"
        "repository": "grafana/loki-release"
    - "name": "pull code to release"
      "uses": "actions/checkout@v4"
      "with":
        "path": "release"
        "repository": "${{ env.RELEASE_REPO }}"
    - "name": "setup node"
      "uses": "actions/setup-node@v4"
      "with":
        "node-version": 20
    - "name": "Set up QEMU"
      "uses": "docker/setup-qemu-action@v3"
    - "name": "set up docker buildx"
      "uses": "docker/setup-buildx-action@v3"
    - "name": "Login to DockerHub (from vault)"
      "uses": "grafana/shared-workflows/actions/dockerhub-login@main"
    - "id": "weekly-version"
      "name": "Get weekly version"
      "run": |
        echo "version=$(./tools/image-tag)" >> $GITHUB_OUTPUT
      "working-directory": "release"
    - "name": "Build and push"
      "timeout-minutes": "${{ fromJSON(env.BUILD_TIMEOUT) }}"
      "uses": "docker/build-push-action@v6"
      "with":
        "build-args": "IMAGE_TAG=${{ steps.weekly-version.outputs.version }}"
        "context": "release"
        "file": "release/cmd/logcli/Dockerfile"
        "platforms": "linux/amd64,linux/arm64,linux/arm"
        "push": true
        "tags": "${{ env.IMAGE_PREFIX }}/logcli:${{ steps.weekly-version.outputs.version }}"
  "logstash":
    "env":
      "BUILD_TIMEOUT": 60
      "IMAGE_PREFIX": "grafana"
      "RELEASE_LIB_REF": "main"
      "RELEASE_REPO": "grafana/loki"
    "needs":
    - "check"
    "runs-on": "ubuntu-latest"
    "steps":
    - "name": "pull release library code"
      "uses": "actions/checkout@v4"
      "with":
        "path": "lib"
        "ref": "${{ env.RELEASE_LIB_REF }}"
        "repository": "grafana/loki-release"
    - "name": "pull code to release"
      "uses": "actions/checkout@v4"
      "with":
        "path": "release"
        "repository": "${{ env.RELEASE_REPO }}"
    - "name": "setup node"
      "uses": "actions/setup-node@v4"
      "with":
        "node-version": 20
    - "name": "Set up QEMU"
      "uses": "docker/setup-qemu-action@v3"
    - "name": "set up docker buildx"
      "uses": "docker/setup-buildx-action@v3"
    - "name": "Login to DockerHub (from vault)"
      "uses": "grafana/shared-workflows/actions/dockerhub-login@main"
    - "id": "weekly-version"
      "name": "Get weekly version"
      "run": |
        echo "version=$(./tools/image-tag)" >> $GITHUB_OUTPUT
      "working-directory": "release"
    - "name": "Build and push"
      "timeout-minutes": "${{ fromJSON(env.BUILD_TIMEOUT) }}"
      "uses": "docker/build-push-action@v6"
      "with":
        "build-args": "IMAGE_TAG=${{ steps.weekly-version.outputs.version }}"
        "context": "release"
        "file": "release/clients/cmd/logstash/Dockerfile"
        "platforms": "linux/amd64"
        "push": true
        "tags": "${{ env.IMAGE_PREFIX }}/logstash-output-loki:${{ steps.weekly-version.outputs.version }}"
  "loki":
    "env":
      "BUILD_TIMEOUT": 60
      "IMAGE_PREFIX": "grafana"
      "RELEASE_LIB_REF": "main"
      "RELEASE_REPO": "grafana/loki"
    "needs":
    - "check"
    "runs-on": "ubuntu-latest"
    "steps":
    - "name": "pull release library code"
      "uses": "actions/checkout@v4"
      "with":
        "path": "lib"
        "ref": "${{ env.RELEASE_LIB_REF }}"
        "repository": "grafana/loki-release"
    - "name": "pull code to release"
      "uses": "actions/checkout@v4"
      "with":
        "path": "release"
        "repository": "${{ env.RELEASE_REPO }}"
    - "name": "setup node"
      "uses": "actions/setup-node@v4"
      "with":
        "node-version": 20
    - "name": "Set up QEMU"
      "uses": "docker/setup-qemu-action@v3"
    - "name": "set up docker buildx"
      "uses": "docker/setup-buildx-action@v3"
    - "name": "Login to DockerHub (from vault)"
      "uses": "grafana/shared-workflows/actions/dockerhub-login@main"
    - "id": "weekly-version"
      "name": "Get weekly version"
      "run": |
        echo "version=$(./tools/image-tag)" >> $GITHUB_OUTPUT
      "working-directory": "release"
    - "name": "Build and push"
      "timeout-minutes": "${{ fromJSON(env.BUILD_TIMEOUT) }}"
      "uses": "docker/build-push-action@v6"
      "with":
        "build-args": "IMAGE_TAG=${{ steps.weekly-version.outputs.version }}"
        "context": "release"
        "file": "release/cmd/loki/Dockerfile"
        "platforms": "linux/amd64,linux/arm64,linux/arm"
        "push": true
        "tags": "${{ env.IMAGE_PREFIX }}/loki:${{ steps.weekly-version.outputs.version }}"
  "loki-canary":
    "env":
      "BUILD_TIMEOUT": 60
      "IMAGE_PREFIX": "grafana"
      "RELEASE_LIB_REF": "main"
      "RELEASE_REPO": "grafana/loki"
    "needs":
    - "check"
    "runs-on": "ubuntu-latest"
    "steps":
    - "name": "pull release library code"
      "uses": "actions/checkout@v4"
      "with":
        "path": "lib"
        "ref": "${{ env.RELEASE_LIB_REF }}"
        "repository": "grafana/loki-release"
    - "name": "pull code to release"
      "uses": "actions/checkout@v4"
      "with":
        "path": "release"
        "repository": "${{ env.RELEASE_REPO }}"
    - "name": "setup node"
      "uses": "actions/setup-node@v4"
      "with":
        "node-version": 20
    - "name": "Set up QEMU"
      "uses": "docker/setup-qemu-action@v3"
    - "name": "set up docker buildx"
      "uses": "docker/setup-buildx-action@v3"
    - "name": "Login to DockerHub (from vault)"
      "uses": "grafana/shared-workflows/actions/dockerhub-login@main"
    - "id": "weekly-version"
      "name": "Get weekly version"
      "run": |
        echo "version=$(./tools/image-tag)" >> $GITHUB_OUTPUT
      "working-directory": "release"
    - "name": "Build and push"
      "timeout-minutes": "${{ fromJSON(env.BUILD_TIMEOUT) }}"
      "uses": "docker/build-push-action@v6"
      "with":
        "build-args": "IMAGE_TAG=${{ steps.weekly-version.outputs.version }}"
        "context": "release"
        "file": "release/cmd/loki-canary/Dockerfile"
        "platforms": "linux/amd64,linux/arm64,linux/arm"
        "push": true
        "tags": "${{ env.IMAGE_PREFIX }}/loki-canary:${{ steps.weekly-version.outputs.version }}"
  "loki-canary-boringcrypto":
    "env":
      "BUILD_TIMEOUT": 60
      "IMAGE_PREFIX": "grafana"
      "RELEASE_LIB_REF": "main"
      "RELEASE_REPO": "grafana/loki"
    "needs":
    - "check"
    "runs-on": "ubuntu-latest"
    "steps":
    - "name": "pull release library code"
      "uses": "actions/checkout@v4"
      "with":
        "path": "lib"
        "ref": "${{ env.RELEASE_LIB_REF }}"
        "repository": "grafana/loki-release"
    - "name": "pull code to release"
      "uses": "actions/checkout@v4"
      "with":
        "path": "release"
        "repository": "${{ env.RELEASE_REPO }}"
    - "name": "setup node"
      "uses": "actions/setup-node@v4"
      "with":
        "node-version": 20
    - "name": "Set up QEMU"
      "uses": "docker/setup-qemu-action@v3"
    - "name": "set up docker buildx"
      "uses": "docker/setup-buildx-action@v3"
    - "name": "Login to DockerHub (from vault)"
      "uses": "grafana/shared-workflows/actions/dockerhub-login@main"
    - "id": "weekly-version"
      "name": "Get weekly version"
      "run": |
        echo "version=$(./tools/image-tag)" >> $GITHUB_OUTPUT
      "working-directory": "release"
    - "name": "Build and push"
      "timeout-minutes": "${{ fromJSON(env.BUILD_TIMEOUT) }}"
      "uses": "docker/build-push-action@v6"
      "with":
        "build-args": "IMAGE_TAG=${{ steps.weekly-version.outputs.version }}"
        "context": "release"
        "file": "release/cmd/loki-canary-boringcrypto/Dockerfile"
        "platforms": "linux/amd64,linux/arm64,linux/arm"
        "push": true
        "tags": "${{ env.IMAGE_PREFIX }}/loki-canary-boringcrypto:${{ steps.weekly-version.outputs.version }}"
  "loki-docker-driver":
    "env":
      "BUILD_TIMEOUT": 60
      "IMAGE_PREFIX": "grafana"
      "RELEASE_LIB_REF": "main"
      "RELEASE_REPO": "grafana/loki"
    "needs":
    - "version"
    "runs-on": "ubuntu-latest"
    "steps":
    - "name": "pull release library code"
      "uses": "actions/checkout@v4"
      "with":
        "path": "lib"
        "ref": "${{ env.RELEASE_LIB_REF }}"
        "repository": "grafana/loki-release"
    - "name": "pull code to release"
      "uses": "actions/checkout@v4"
      "with":
        "path": "release"
        "repository": "${{ env.RELEASE_REPO }}"
    - "name": "setup node"
      "uses": "actions/setup-node@v4"
      "with":
        "node-version": 20
    - "name": "Set up QEMU"
      "uses": "docker/setup-qemu-action@v3"
    - "name": "set up docker buildx"
      "uses": "docker/setup-buildx-action@v3"
    - "name": "Login to DockerHub (from vault)"
      "uses": "grafana/shared-workflows/actions/dockerhub-login@main"
    - "id": "weekly-version"
      "name": "Get weekly version"
      "run": |
        echo "version=$(./tools/image-tag)" >> $GITHUB_OUTPUT
        
        platform="$(echo "${{ matrix.platform}}" |  sed  "s/\(.*\)\/\(.*\)/\1-\2/")"
        echo "platform=${platform}" >> $GITHUB_OUTPUT
        echo "platform_short=$(echo ${{ matrix.platform }} | cut -d / -f 2)" >> $GITHUB_OUTPUT
        if [[ "${platform}" == "linux/arm64" ]]; then
          echo "plugin_arch=-arm64" >> $GITHUB_OUTPUT
        else
          echo "plugin_arch=" >> $GITHUB_OUTPUT
        fi
      "working-directory": "release"
    - "name": "Build and export"
      "timeout-minutes": "${{ fromJSON(env.BUILD_TIMEOUT) }}"
      "uses": "docker/build-push-action@v6"
      "with":
        "build-args": "IMAGE_TAG=${{ steps.weekly-version.outputs.version }},GOARCH=${{ steps.weekly-version.outputs.platform_short }}"
        "context": "release"
        "file": "release/clients/cmd/docker-driver/Dockerfile"
        "outputs": "type=docker,dest=release/images/grafana/loki-docker-driver-${{ needs.version.outputs.version}}-${{ steps.weekly-version.outputs.platform }}.tar"
        "platforms": "${{ matrix.platform }}"
        "push": false
        "tags": "${{ env.IMAGE_PREFIX }}/grafana/loki-docker-driver:${{ steps.weekly-version.outputs.version }}"
    - "env":
        "BUILD_DIR": "release/clients/cmd/docker-driver"
        "IMAGE_TAG": "${{ steps.weekly-version.outputs.version }}"
      "name": "Package and push as Docker plugin"
      "run": |
        rm -rf "${{ env.BUILD_DIR }}/rootfs" || true
        mkdir "${{ env.BUILD_DIR }}/rootfs"
        tar -x -C "${{ env.BUILD_DIR }}/rootfs" -f "release/images/%s-${{ needs.version.outputs.version}}-${{ steps.weekly-version.outputs.platform }}.tar"
        docker plugin create "${{ env.IMAGE_TAG }}${{ steps.weekly-version.outputs.plugin_arch }}" "${{ env.BUILD_DIR }}"
        docker plugin push "${{ env.IMAGE_TAG }}${{ steps.weekly-version.outputs.plugin_arch }}"
      "working-directory": "release"
    "strategy":
      "matrix":
        "platform":
        - "linux/amd64"
        - "linux/arm64"
  "promtail":
    "env":
      "BUILD_TIMEOUT": 60
      "IMAGE_PREFIX": "grafana"
      "RELEASE_LIB_REF": "main"
      "RELEASE_REPO": "grafana/loki"
    "needs":
    - "check"
    "runs-on": "ubuntu-latest"
    "steps":
    - "name": "pull release library code"
      "uses": "actions/checkout@v4"
      "with":
        "path": "lib"
        "ref": "${{ env.RELEASE_LIB_REF }}"
        "repository": "grafana/loki-release"
    - "name": "pull code to release"
      "uses": "actions/checkout@v4"
      "with":
        "path": "release"
        "repository": "${{ env.RELEASE_REPO }}"
    - "name": "setup node"
      "uses": "actions/setup-node@v4"
      "with":
        "node-version": 20
    - "name": "Set up QEMU"
      "uses": "docker/setup-qemu-action@v3"
    - "name": "set up docker buildx"
      "uses": "docker/setup-buildx-action@v3"
    - "name": "Login to DockerHub (from vault)"
      "uses": "grafana/shared-workflows/actions/dockerhub-login@main"
    - "id": "weekly-version"
      "name": "Get weekly version"
      "run": |
        echo "version=$(./tools/image-tag)" >> $GITHUB_OUTPUT
      "working-directory": "release"
    - "name": "Build and push"
      "timeout-minutes": "${{ fromJSON(env.BUILD_TIMEOUT) }}"
      "uses": "docker/build-push-action@v6"
      "with":
        "build-args": "IMAGE_TAG=${{ steps.weekly-version.outputs.version }}"
        "context": "release"
        "file": "release/clients/cmd/promtail/Dockerfile"
        "platforms": "linux/amd64,linux/arm64,linux/arm"
        "push": true
        "tags": "${{ env.IMAGE_PREFIX }}/promtail:${{ steps.weekly-version.outputs.version }}"
  "querytee":
    "env":
      "BUILD_TIMEOUT": 60
      "IMAGE_PREFIX": "grafana"
      "RELEASE_LIB_REF": "main"
      "RELEASE_REPO": "grafana/loki"
    "needs":
    - "check"
    "runs-on": "ubuntu-latest"
    "steps":
    - "name": "pull release library code"
      "uses": "actions/checkout@v4"
      "with":
        "path": "lib"
        "ref": "${{ env.RELEASE_LIB_REF }}"
        "repository": "grafana/loki-release"
    - "name": "pull code to release"
      "uses": "actions/checkout@v4"
      "with":
        "path": "release"
        "repository": "${{ env.RELEASE_REPO }}"
    - "name": "setup node"
      "uses": "actions/setup-node@v4"
      "with":
        "node-version": 20
    - "name": "Set up QEMU"
      "uses": "docker/setup-qemu-action@v3"
    - "name": "set up docker buildx"
      "uses": "docker/setup-buildx-action@v3"
    - "name": "Login to DockerHub (from vault)"
      "uses": "grafana/shared-workflows/actions/dockerhub-login@main"
    - "id": "weekly-version"
      "name": "Get weekly version"
      "run": |
        echo "version=$(./tools/image-tag)" >> $GITHUB_OUTPUT
      "working-directory": "release"
    - "name": "Build and push"
      "timeout-minutes": "${{ fromJSON(env.BUILD_TIMEOUT) }}"
      "uses": "docker/build-push-action@v6"
      "with":
        "build-args": "IMAGE_TAG=${{ steps.weekly-version.outputs.version }}"
        "context": "release"
        "file": "release/cmd/querytee/Dockerfile"
        "platforms": "linux/amd64"
        "push": true
        "tags": "${{ env.IMAGE_PREFIX }}/loki-query-tee:${{ steps.weekly-version.outputs.version }}"
"name": "publish images"
"on":
  "push":
    "branches":
    - "k[0-9]+*"
    - "main"
"permissions":
  "contents": "write"
  "id-token": "write"
  "pull-requests": "write"
